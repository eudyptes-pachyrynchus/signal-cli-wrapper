#!/bin/sh

# Wrapper for signal-cli, adding convenience and color
# Cam Webb <https://github.com/camwebb/signal-cli-wrapper>

# License: This software depends on GPLv3-licenced software, but via CLI
# and pipes. It therefore counts as independent software (see
# https://www.gnu.org/licenses/gpl-faq.html#MereAggregation).
# This software is however also released under GNU GPLv3. See LICENSE file.

# Installation: 1) make this script executable
#               2) script and signal-cli must be in $PATH

USAGE="Usage: sg [ ids | snd NAME \"message\" | rcv | cnv NAME | log ]"

declare -A NUM

# Config
CONFIG=~/.config/signal-cli-wrapper/config

# Exit, if there is no config file
if [ ! -f $CONFIG ]
then
    echo -e "  no config file found."
    exit 1
fi

source $CONFIG

# Construct sed substitution for reading log and ids
SEDSTR="sed -E "
for i in "${!NUM[@]}" # $(seq 0 $((${#NUM[@]} - 1)))
do
    SEDSTR="$SEDSTR -e 's/(\\"${NUM[$i]}")/"$i" (\1)/g' "
done

# Logfile date format
DATE=`date +"%s000 (%Y-%m-%dT%H:%M:00.000Z)" -u`

# Read input

# If no arguments
if [ $# -eq 0 ]
then
    echo -e "  " $USAGE
    exit 1

# get the registered numbers
elif [ $1 == "ids" ]
then
    signal-cli -u $MYNUM listIdentities | eval $SEDSTR | sed 's/:.*$//g'

# get the latest messages and write to stdout and to logfile
elif [ $1 == "rcv" ]
then
    signal-cli -u $MYNUM receive | tee -a $LOG

# read the logfile, substituting names for numbers
elif [ $1 == "log" ]
then
    cat $LOG | eval "$SEDSTR" | less +G

# Send a message to <name> and write to logfile
elif [ $1 == "snd" ]
then
    # as long as the rigth # of arguments
    if [ $# -eq 3 -a -n "${NUM[$2]}" ]
    then
        echo -e "Sent to: "${NUM[$2]}"\nTimestamp: $DATE\nBody: $3\n" >> $LOG
        signal-cli -u $MYNUM send ${NUM[$2]} -m "$3"
    else
        echo -e "  " $USAGE
        exit 1
    fi

# Create a conversation from the logfile
elif [ $1 == "cnv" ]
then
    # as long as there is a second argument, the <name>
    if [ $# -eq 2 -a -n "${NUM[$2]}" ]
    then
        echo
        # (for colors: https://en.wikipedia.org/wiki/ANSI_escape_code )
        gawk -v "num=${NUM[$2]}" -v "name=$2" \
          'BEGIN{RS="" ; FS="\n" ; width = 60}
           {
             # for each log entry, is it a sent or recieved msg for <num>?
             if ($1 ~ ("Sent to: \\" num))
               page(substr($3,7), (sprintf("%*s", length(name), " ") " < "),\
                 "10", substr($2,12,10))
             if (($1 ~ ("Envelope from: \\" num)) && ($4 ~ /^Body/))
               page(substr($4,7), (name " > "), "11", substr($2,12,10))
           }
           # arguments: message, message prefix, color, timestamp
           function page(msg, l1, col, ts,      lines, i,dash,ec,bc) {
             lines = int((length(msg)-1) / width) + 1
             # create the dash, if needed
             ec = substr(msg,width,1); bc = substr(msg,width+1,1)
             dash = (ec && (ec!=" ") && bc && (bc!=" ")) ? "-" : ""
             # print the first line, preceded by date and name
             print "\x1b[38;5;8m" strftime("[%a] ",ts) "\x1b[38;5;" \
               col "m" l1 substr(msg,1,width) dash
             for (i = 2; i <= lines; i++) {
               # print other lines
               ec = substr(msg,(i*width),1); bc=substr(msg,(i*width)+1,1)
               dash = (ec && (ec!=" ") && bc && (bc!=" ")) ? "-" : ""
               print sprintf("%*s", length(l1)+6, " ") \
                 gensub(/^ */,"","G",substr(msg,((i-1)*width)+1,width)) dash
             } # print color reset:
             printf "\x1b[0;m" \
           }' $LOG
        echo
    else
        echo -e "  " $USAGE
        exit 1
    fi
fi
